#!/usr/bin/env python

"""Extract AWS credentials from terraform state, encrypt, and upload to GitHub.

This command must be executed in the directory containing the .terraform state
within the a GitHub project.

Usage:
  iam-to-github [--log-level=LEVEL] <github-token> <repository-name>
  iam-to-github (-h | --help)

Options:
  -h --help              Show this message.
  --log-level=LEVEL      If specified, then the log level will be set to
                         the specified value.  Valid values are "debug", "info",
                         "warning", "error", and "critical". [default: info]
"""

# Standard Python Libraries
from base64 import b64encode
import json
import logging
import subprocess  # nosec
import sys
from typing import Dict

# Third-Party Libraries
import docopt
from nacl import encoding, public
import requests


def creds_from_child(child_module):
    """Search for IAM access keys in child resources.

    Returns (key_id, secret) if found, (None, None) otherwise.
    """
    for resource in child_module["resources"]:
        if resource["address"] == "aws_iam_access_key.key":
            key_id = resource["values"]["id"]
            secret = resource["values"]["secret"]
            return key_id, secret
    return None, None


def creds_from_terraform():
    """Retrieve IAM credentials from terraform state.

    Returns (key_id, secret) if found, (None, None) otherwise.
    """
    c = subprocess.run(  # nosec
        "terraform show --json", shell=True, stdout=subprocess.PIPE  # nosec
    )
    j = json.loads(c.stdout)

    if not j.get("values"):
        return None, None

    for child_module in j["values"]["root_module"]["child_modules"]:
        key_id, secret = creds_from_child(child_module)
        if key_id:
            return key_id, secret
    else:
        return None, None


def encrypt(public_key: str, secret_value: str) -> str:
    """Encrypt a Unicode string using the public key."""
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")


def get_public_key(session: requests.Session, repo_name) -> Dict[str, str]:
    """Fetch the public key for a repository."""
    logging.info(f"Requesting public key for repository {repo_name}")
    response = session.get(
        f"https://api.github.com/repos/{repo_name}/actions/secrets/public-key"
    )
    response.raise_for_status()
    return response.json()


def set_secret(
    session: requests.Session,
    repo_name: str,
    secret_name: str,
    secret_value: str,
    public_key: Dict[str, str],
) -> None:
    """Create a secret in the repository."""
    logging.info(f"Creating secret {secret_name}")
    encrypted_secret_value = encrypt(public_key["key"], secret_value)
    response = session.put(
        f"https://api.github.com/repos/{repo_name}/actions/secrets/{secret_name}",
        json={
            "encrypted_value": encrypted_secret_value,
            "key_id": public_key["key_id"],
        },
    )
    response.raise_for_status()


def main() -> int:
    """Set up logging and call the requested commands."""
    args = docopt.docopt(__doc__, version="0.0.1")

    # Set up logging
    log_level = args["--log-level"]
    try:
        logging.basicConfig(
            format="%(asctime)-15s %(levelname)s %(message)s", level=log_level.upper()
        )
    except ValueError:
        logging.critical(
            f'"{log_level}" is not a valid logging level.  Possible values '
            "are debug, info, warning, and error."
        )
        return 1

    github_token: str = args["<github-token>"]
    repo_name: str = args["<repository-name>"]

    logging.info("Searching Terraform state for IAM credentials.")
    aws_key_id: str
    aws_secret: str
    aws_key_id, aws_secret = creds_from_terraform()
    if aws_key_id is None:
        logging.error("Credentials not found in terraform state.")
        logging.error("Is there a .terraform state directory here?")
        sys.exit(-1)

    logging.info("Creating GitHub API session.")
    session: requests.Session = requests.Session()
    session.auth = ("", github_token)

    public_key: Dict[str, str] = get_public_key(session, repo_name)

    set_secret(session, repo_name, "AWS_ACCESS_KEY_ID", aws_key_id, public_key)
    set_secret(session, repo_name, "AWS_SECRET_ACCESS_KEY", aws_secret, public_key)

    return 0


if __name__ == "__main__":
    sys.exit(main())
